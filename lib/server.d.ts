import { Address, Engine } from '@aurora-is-near/engine';
interface NearProvider {
    networkId: string;
    evm_contract: string;
    isReadOnly: boolean;
    url: string;
    version: string;
    nearProvider: any;
    keyStore: any;
    signer: any;
    connection: any;
    accountId: string;
    account: any;
    accountEvmAddress: string;
    accounts: Map<string, any>;
    walletUrl: string;
    explorerUrl: string;
}
interface ServerOptions {
    dummy: string;
}
export declare class Server {
    readonly engine: Engine;
    readonly provider: NearProvider;
    readonly options: ServerOptions;
    constructor(engine: Engine, provider: NearProvider, options: ServerOptions);
    web3_clientVersion(): string;
    web3_sha3(input: string): string;
    net_listening(): boolean;
    net_peerCount(): string;
    net_version(): Promise<string>;
    eth_accounts(): Promise<Address[]>;
    eth_blockNumber(): Promise<string>;
    eth_call(...args: any[]): Promise<any>;
    eth_chainId(): Promise<string>;
    eth_coinbase(): Promise<Address>;
    eth_compileLLL(): void;
    eth_compileSerpent(): void;
    eth_compileSolidity(): void;
    eth_estimateGas(_1: any, ..._args: any[]): string;
    eth_gasPrice(): string;
    eth_getBalance(address: any, ..._args: any[]): Promise<string>;
    eth_getBlockByHash(blockID: string, ...args: any[]): Promise<any | null>;
    eth_getBlockByNumber(blockID: string, ...args: any[]): Promise<any | null>;
    eth_getBlockTransactionCountByHash(blockID: string): Promise<string | null>;
    eth_getBlockTransactionCountByNumber(blockID: string): Promise<string | null>;
    eth_getCode(address: any, ..._args: any[]): Promise<string>;
    eth_getCompilers(): any[];
    eth_getFilterChanges(): void;
    eth_getFilterLogs(): void;
    eth_getLogs(...args: any[]): Promise<any>;
    eth_getProof(): void;
    eth_getStorageAt(address: any, ...args: any[]): Promise<string>;
    eth_getTransactionByBlockHashAndIndex(blockID: string, transactionIdx: string): Promise<string | null>;
    eth_getTransactionByBlockNumberAndIndex(blockID: string, transactionIdx: string): Promise<string | null>;
    eth_getTransactionByHash(...args: any[]): Promise<any>;
    eth_getTransactionCount(address: any): Promise<string>;
    eth_getTransactionReceipt(...args: any[]): Promise<any>;
    eth_getUncleByBlockHashAndIndex(): null;
    eth_getUncleByBlockNumberAndIndex(): null;
    eth_getUncleCountByBlockHash(blockID: string): Promise<string | null>;
    eth_getUncleCountByBlockNumber(blockID: string): Promise<string | null>;
    eth_getWork(): void;
    eth_hashrate(): string;
    eth_mining(): boolean;
    eth_newBlockFilter(): void;
    eth_newFilter(): void;
    eth_newPendingTransactionFilter(): void;
    eth_pendingTransactions(): any[];
    eth_protocolVersion(): string;
    eth_sendRawTransaction(...args: any[]): Promise<any>;
    eth_sendTransaction(...args: any[]): Promise<any>;
    eth_sign(): void;
    eth_signTransaction(): void;
    eth_signTypedData(): null;
    eth_submitHashrate(): void;
    eth_submitWork(): void;
    eth_syncing(): boolean;
    eth_uninstallFilter(): void;
}
export {};
